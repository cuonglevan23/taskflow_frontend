"use client";

import React, { useState } from 'react';
import { ProjectFile } from '../context/ProjectFilesContext';
import { FileActions } from '../hooks/useProjectFileActions';
import { FileIcon } from './FileIcon';
import { ItemSelection, SelectionBadge, ShareButton, DeleteButton, DownloadButton } from '@/components/ui/Button';

interface FileCardProps {
  file: ProjectFile;
  isSelected: boolean;
  onSelect: (fileId: string) => void;
  actions: FileActions;
}

export function FileCard({ file, isSelected, onSelect, actions }: FileCardProps) {
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const isImage = () => {
    const type = file.type.toLowerCase();
    return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(type) || 
           file.mimeType.startsWith('image/');
  };

  const getImageThumbnail = () => {
    if (!isImage() || imageError) return null;
    
    // In a real app, you would have thumbnail URLs generated by your backend
    // For demo purposes, we'll use the file URL directly
    return (
      <div className="w-full h-32 bg-gray-100 dark:bg-gray-700 rounded-t-lg overflow-hidden relative">
        <img
          src={file.url}
          alt={file.name}
          className="w-full h-full object-cover transition-transform duration-200 group-hover:scale-105"
          onError={() => setImageError(true)}
          onLoad={() => setImageError(false)}
        />
        {/* Image overlay on hover */}
        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center">
          <div className="text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200">
            <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v12a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm5 3a1 1 0 000 2h4a1 1 0 100-2H8z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      </div>
    );
  };

  const handleFileClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    actions.onFileClick(file);
  };

  const handleSelectClick = () => {
    onSelect(file.id);
  };

  return (
    <div
      className={`group relative bg-white dark:bg-gray-800 rounded-lg border-2 transition-all duration-200 overflow-hidden ${
        isSelected 
          ? 'border-blue-500 shadow-lg' 
          : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600'
      }`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Selection controls */}
      <ItemSelection
        selected={isSelected}
        onToggle={handleSelectClick}
      />
      
      <SelectionBadge isSelected={isSelected} />

      {/* File preview */}
      <div onClick={handleFileClick} className="cursor-pointer">
        {/* Image thumbnail or icon */}
        {isImage() && !imageError ? (
          getImageThumbnail()
        ) : (
          <div className="flex items-center justify-center p-6 aspect-square">
            <FileIcon file={file} size="lg" />
          </div>
        )}

        {/* File info */}
        <div className="p-4">
          <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate mb-1">
            {file.name}
          </h3>
          
          <div className="text-xs text-gray-500 dark:text-gray-400 space-y-1">
            <div className="flex items-center justify-between">
              <span>{formatFileSize(file.size)}</span>
              <span className="uppercase font-medium">{file.type}</span>
            </div>
            
            <div className="flex items-center gap-2">
              <div className="flex items-center gap-1">
                <div className="w-4 h-4 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center text-xs font-medium">
                  {file.uploadedBy.avatar}
                </div>
                <span className="truncate">{file.uploadedBy.name}</span>
              </div>
            </div>
            
            <div className="text-xs">
              {new Date(file.uploadedAt).toLocaleDateString()}
            </div>
          </div>

          {/* Tags */}
          {file.tags.length > 0 && (
            <div className="flex flex-wrap gap-1 mt-2">
              {file.tags.slice(0, 2).map(tag => (
                <span 
                  key={tag}
                  className="text-xs bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 px-2 py-1 rounded"
                >
                  {tag}
                </span>
              ))}
              {file.tags.length > 2 && (
                <span className="text-xs text-gray-500 dark:text-gray-400">
                  +{file.tags.length - 2}
                </span>
              )}
            </div>
          )}

          {/* Shared indicator */}
          {file.isShared && (
            <div className="flex items-center gap-1 mt-2">
              <svg className="w-3 h-3 text-orange-600 dark:text-orange-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
              </svg>
              <span className="text-xs text-orange-600 dark:text-orange-400 font-medium">
                Shared
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Action buttons - show on hover */}
      {(isHovered || isSelected) && (
        <div className="absolute bottom-2 right-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-1 opacity-0 group-hover:opacity-100 transition-all duration-200">
          <div className="flex gap-1">
            <DownloadButton
              onClick={() => {
                actions.onFileDownload(file);
              }}
              size="xs"
              variant="secondary"
            />
            
            <ShareButton
              onClick={() => {
                actions.onFileShare(file);
              }}
              size="xs"
              variant="outline"
            />
            
            <DeleteButton
              onClick={() => {
                actions.onFileDelete(file);
              }}
              size="xs"
              variant="secondary"
              confirmText={`Are you sure you want to delete "${file.name}"?`}
            />
          </div>
        </div>
      )}

      {/* Version indicator */}
      {file.version > 1 && (
        <div className="absolute bottom-2 right-2 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 text-xs px-2 py-1 rounded-full">
          v{file.version}
        </div>
      )}
    </div>
  );
}