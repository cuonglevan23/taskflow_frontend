"use client";

import React, { useState } from 'react';
import { ProjectFile } from '../context/ProjectFilesContext';
import { FileActions } from '../hooks/useProjectFileActions';
import { FileIcon } from './FileIcon';
import { Button } from '@/components/ui';
import { useTheme } from '@/layouts/hooks/useTheme';
import Image from 'next/image';
import { Download, Share, Trash2 } from 'lucide-react';

interface FileCardProps {
  file: ProjectFile;
  isSelected: boolean;
  onSelect: (fileId: string) => void;
  actions: FileActions;
}

export function FileCard({ file, actions }: FileCardProps) {
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const { theme } = useTheme();

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const isImage = () => {
    const type = file.type.toLowerCase();
    return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(type) || 
           file.mimeType.startsWith('image/');
  };

  const getImageThumbnail = () => {
    if (!isImage() || imageError) return null;
    
    // In a real app, you would have thumbnail URLs generated by your backend
    // For demo purposes, we'll use the file URL directly
    return (
      <div 
        className="w-full h-24 rounded-t-lg overflow-hidden relative bg-slate-200"
        style={{ backgroundColor: theme.background.tertiary }}
      >
        <div className="relative w-full h-full">
          <Image
            src={file.url}
            alt={file.name}
            className="transition-transform duration-200 group-hover:scale-105 object-cover"
            fill
            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
            onError={() => setImageError(true)}
            onLoad={() => setImageError(false)}
          />
        </div>
        {/* Image overlay on hover */}
        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center">
          <div className="text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200">
            <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v12a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm5 3a1 1 0 000 2h4a1 1 0 100-2H8z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      </div>
    );
  };

  const handleFileClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    actions.onFileClick(file);
  };

  return (
    <div
      className="group relative rounded-lg border transition-all duration-200 overflow-hidden h-full max-w-full"
      style={{ 
        backgroundColor: theme.background.primary,
        borderColor: theme.border.default,
        boxShadow: 'none'
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* File preview */}
      <div onClick={handleFileClick} className="cursor-pointer h-full flex flex-col w-full">{
        /* Image thumbnail or icon */
        isImage() && !imageError ? (
          getImageThumbnail()
        ) : (
          <div className="flex items-center justify-center p-3 aspect-square">
            <FileIcon file={file} size="md" />
          </div>
        )}

        {/* File info */}
        <div className="p-3 flex-1 flex flex-col">
          <h3 
            className="text-xs font-medium truncate mb-1"
            style={{ color: theme.text.primary }}
          >
            {file.name}
          </h3>
          
          <div style={{ color: theme.text.secondary }} className="text-xs">
            <div className="flex items-center justify-between">
              <span>{formatFileSize(file.size)}</span>
              <span className="uppercase font-medium text-xs">{file.type}</span>
            </div>
            <div className="flex items-center justify-between mt-1">
              <div className="flex items-center gap-1">
                <div 
                  className="w-3 h-3 rounded-full flex items-center justify-center text-xs font-medium"
                  style={{
                    backgroundColor: theme.background.tertiary,
                    color: theme.text.primary
                  }}
                >
                  {file.uploadedBy.avatar}
                </div>
                <span className="truncate text-xs">{file.uploadedBy.name.split(' ')[0]}</span>
              </div>
              <div className="text-xs">
                {new Date(file.uploadedAt).toLocaleDateString()}
              </div>
            </div>
          </div>

          {/* Tags */}
          {file.tags.length > 0 && (
            <div className="flex flex-wrap gap-1 mt-1">
              {file.tags.slice(0, 1).map(tag => (
                <span 
                  key={tag}
                  className="text-xs px-1.5 py-0.5 rounded"
                  style={{ 
                    backgroundColor: theme.background.tertiary,
                    color: theme.text.secondary
                  }}
                >
                  {tag}
                </span>
              ))}
              {file.tags.length > 1 && (
                <span style={{ color: theme.text.secondary }} className="text-xs">
                  +{file.tags.length - 1}
                </span>
              )}
            </div>
          )}

          {/* Shared indicator */}
          {file.isShared && (
            <div className="flex items-center gap-1 mt-1">
              <svg 
                className="w-2 h-2" 
                fill="currentColor" 
                viewBox="0 0 20 20"
                style={{ color: theme.button.primary.background }}
              >
                <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
              </svg>
              <span 
                className="text-xs font-medium"
                style={{ color: theme.button.primary.background }}
              >
                Shared
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Action buttons - show on hover */}
      {isHovered && (
        <div 
          className="absolute bottom-1 right-1 rounded-lg shadow-lg p-0.5 opacity-0 group-hover:opacity-100 transition-all duration-200"
          style={{ 
            backgroundColor: theme.background.primary,
            borderColor: theme.border.default,
            borderWidth: '1px'
          }}
        >
          <div className="flex gap-0.5">
            <Button
              size="icon"
              variant="secondary"
              className="h-6 w-6 p-1"
              onClick={() => actions.onFileDownload(file)}
            >
              <Download size={14} />
            </Button>
            
            <Button
              size="icon"
              variant="secondary"
              className="h-6 w-6 p-1"
              onClick={() => actions.onFileShare(file)}
            >
              <Share size={14} />
            </Button>
            
            <Button
              size="icon"
              variant="secondary"
              className="h-6 w-6 p-1"
              onClick={() => {
                if (confirm(`Are you sure you want to delete "${file.name}"?`)) {
                  actions.onFileDelete(file);
                }
              }}
            >
              <Trash2 size={14} />
            </Button>
          </div>
        </div>
      )}

      {/* Version indicator */}
      {file.version > 1 && (
        <div 
          className="absolute bottom-1 right-1 text-xs px-1.5 py-0.5 rounded-full"
          style={{ 
            backgroundColor: theme.background.tertiary,
            color: theme.text.secondary
          }}
        >
          v{file.version}
        </div>
      )}
    </div>
  );
}