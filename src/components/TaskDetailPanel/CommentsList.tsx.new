import React from 'react';
import { Button } from '@/components/ui/Button';
import Avatar from '@/components/ui/Avatar/Avatar';
import CommentItem from './CommentItem';
import ApiDebugger from './ApiDebugger';
import { useTaskComments, useCommentActions, useCommentCount } from '@/hooks/useComments';

interface CommentsListProps {
  taskId: string | null;
  currentUserEmail?: string;
}

const CommentsList = ({
  taskId,
  currentUserEmail = "cuonglv.21ad@vku.udn.vn"
}: CommentsListProps) => {
  // Use custom hooks for data and actions
  const numericTaskId = taskId ? parseInt(taskId, 10) : null;
  
  // Log the ID being used
  console.log('Task ID for comments:', { original: taskId, numeric: numericTaskId });
  
  const { comments, isLoading, error, revalidate } = useTaskComments(numericTaskId);
  const { count: commentCount, isLoading: isCountLoading } = useCommentCount(numericTaskId);
  const { updateComment, deleteComment, isUpdating, isDeleting } = useCommentActions(numericTaskId);

  const handleEditComment = async (commentId: number, content: string) => {
    try {
      await updateComment(commentId, content);
    } catch (error) {
      console.error('Failed to update comment:', error);
    }
  };

  const handleDeleteComment = async (commentId: number) => {
    try {
      await deleteComment(commentId);
    } catch (error) {
      console.error('Failed to delete comment:', error);
    }
  };

  if (!taskId) {
    return (
      <div className="text-gray-400 text-center py-8">
        Select a task to view comments
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="space-y-4">
        {/* Loading skeleton */}
        {[1, 2].map((i) => (
          <div key={i} className="flex items-start gap-3 animate-pulse">
            <div className="w-8 h-8 bg-gray-600 rounded-full"></div>
            <div className="flex-1">
              <div className="h-3 bg-gray-600 rounded w-1/3 mb-2"></div>
              <div className="h-16 bg-gray-600 rounded"></div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center py-8">
        <div className="mb-2">Failed to load comments</div>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => revalidate()}
          className="text-blue-400 hover:text-blue-300"
        >
          Try again
        </Button>
        
        {/* Add the API debugger component */}
        <ApiDebugger taskId={numericTaskId} />
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Existing Comments */}
      {comments.length > 0 ? (
        <div className="space-y-4">
          <div className="text-sm text-gray-400 mb-2">
            {commentCount} Comment{commentCount !== 1 ? 's' : ''}
          </div>
          {comments.map((comment) => (
            <CommentItem
              key={comment.id}
              comment={comment}
              onEdit={handleEditComment}
              onDelete={handleDeleteComment}
              isEditing={isUpdating}
              isDeleting={isDeleting}
              canEdit={comment.userEmail === currentUserEmail}
              canDelete={comment.userEmail === currentUserEmail}
            />
          ))}
        </div>
      ) : (
        <div className="text-gray-400 text-center py-8">
          <div className="text-lg mb-2">No comments yet</div>
          <div className="text-sm">Be the first to add a comment</div>
        </div>
      )}
    </div>
  );
};

export default CommentsList;
